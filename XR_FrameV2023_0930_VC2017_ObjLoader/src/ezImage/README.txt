ezImageクラス
・JPEG形式の画像ファイルを読み込む
・ビットマップ形式で表示する
・テクスチャポリゴンで表示する
・テクスチャとして使う
・カメラから入力する
・JPEGで保存する

インストール方法
・このフォルダごと、ソースファイルのフォルダに入れてください。
◆次のファイルをソースファイルのフォルダにコピーしてください
> libjpeg.lib
◆以下のファイルをソリューションに追加してください
（ファイルを別のフォルダにコピーする必要はありません。）
ソースファイル
> ez\image.cpp
> ez\ezJpeg.cpp
> ez\ezWebCam.cpp
ヘッダファイル
＊組込は必須ではありません
＊プロトタイプの確認に使って下さい。
> ez\image.h

★重要：フォルダ内のファイルは移動・削除しないでください。
★重要：不具合を修正するなどのほかは、
　　　　積極的な変更は避けてください。
　　　　以降の修正版への差し替えがむずかしくなります。

使い方の例）

◆STEP 1. 変数の準備
SimDataT(sim.h)にezImageクラスのポインタ変数を登録
ezImage *image;

◆STEP 2. インスタンスの生成
InitScene(sim.cpp)

≫用法(1)ファイル読み込みでインスタンスを作る場合
★通常用途として推奨★
コンストラクタで読み込むファイルを指定します
simdata->image = new ezImage( "myimagefile.jpg" );

≫用法(2)事前にインスタンスを作成してから、
ファイルから画像データをロードする場合
★仕様上注意事項あり★
//コンストラクタで空のオブジェクトを生成
simdata->image = new ezImage();
//画像を読み込んだ時に画像領域が確保される
simdata->image->loadJpg( "myimagefile.jpg" );

loadJpgメソッドを使うと画像データをファイルから
ロードして上書きすることができます。
動画を静止画に分解したファイルを読み込むことを
想定しており、メモリ領域の確保と解放が繰り返されることを
回避するために、画像領域を使いまわししています。
読み込み直したときには、同じ解像度の
イメージであることを想定していますので、
異なるサイズのデータは潜在的にエラーとなります。
例外処理などはしていません。

◆STEP 3. 描画
DrawScene(draw.cpp)

≫用法(1)テクスチャポリゴンとして描画する

縦横1mのポリゴン４角形として、任意に描画できます
他のオブジェクトを描画する部分に組み込めば、
オブジェクトを任意の場所に設定する文脈で、
自由な位置姿勢・大きさで描画できます。
この関数だけでは、大きさは1m平方、Zの位置０
X,Yの位置だけ指定します。
・・・
glPushMatrix();
//simdata.anyobjectは何らかのオブジェクト
//anyobjectの位置にテクスチャポリゴンをおきたいとする
applyObjTransform( &simdata.anyobject );
applyObjColor( &simdata.anyobject );
drawAnyobject();
//テクスチャポリゴンを調整する任意の幾何変換
glScalef( 0.1, 0.4, 1.0 ); //例えば
simdata->image->draw( xpos, ypos );
//xpos, ypos：XY平面での位置
glPopMatrix();

≫用法(2)ビットマップ画像として描画する
画像をglDrawPixelsでフレームバッファにコピーします。

simdata->image->drawPixels( xpos, ypos );

≫用法(3)テクスチャとして使う
//テクスチャとして適用する
simdata->image->apply();
//そのあとで任意の描画をおこなう
drawAnyobject
//テクスチャを外す
＊これを忘れると以降のオブジェクトにもテクスチャが貼られます
simdata->image->unbind();

///////////////////////////////////////////////////////////
V2.0
・meshid追加、テクスチャポリゴン描画モード追加
V3.0
・USBカメラに対応（使い方は別途提示予定）