#ifndef __CThreedVector_h__
#define __CThreedVector_h__

#define _USE_MATH_DEFINES

#include <iostream>
#include <cmath>

using namespace std;

/** @class  CThreedVector
 *  @brief  3Dベクトルクラス
 *  @author  Masakazu Yoshida(yoshida@iltj.jp)
 *  @version  1.0
 *  @date  2008/12/1 ... 新規作成
 *  @attention  Copyright (C) 2008, ILTJ Inc.
 */
class CThreedVector
{
/*--------------*/
/* 公開メンバ   */
/*--------------*/
public:
  //*******************************************************************
  /*!
   *  @brief  デフォルトコンストラクタ
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  CThreedVector(void);

  //*******************************************************************
  /*!
   *  @brief  コンストラクタ(座標値配列指定)
   *  @param  pval ... 座標値(X, Y, Z)
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  CThreedVector(double *pval);

  //*******************************************************************
  /*!
   *  @brief  コンストラクタ(座標値個別指定)
   *  @param  val1 ... [In] X座標値
   *  @param  val2 ... [In] Y座標値
   *  @param  val3 ... [In] Z座標値
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  CThreedVector(double val1, double val2, double val3);

  //*******************************************************************
  /*!
   *  @brief  コピーコンストラクタ
   *  @param  val ... [In] 3Dベクトルクラスオブジェクト
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  CThreedVector(const CThreedVector &val);

  //*******************************************************************
  /*!
   *  @brief  デストラクタ
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  ~CThreedVector(void);

  //*******************************************************************
  /*!
   *  @brief  X座標値の設定を行います。
   *  @param  val ... [In] X座標値
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  void setPointX(double val);

  //*******************************************************************
  /*!
   *  @brief  Y座標値の設定を行います。
   *  @param  val ... [In] Y座標値
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  void setPointY(double val);

  //*******************************************************************
  /*!
   *  @brief  Z座標値の設定を行います。
   *  @param  val ... [In] Z座標値
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  void setPointZ(double val);

  //*******************************************************************
  /*!
   *  @brief  ベクトル座標値の設定を行います。
   *  @param  pval ... [In] ベクトル座標値(X, Y, Z)
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  void setPointAll(const double *pval);

  //*******************************************************************
  /*!
   *  @brief  X座標値の取得を行います。
   *  @return  double ... [In] X座標値
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  double getPointX(void);

  //*******************************************************************
  /*!
   *  @brief  Y座標値の取得を行います。
   *  @return  double ... Y座標値
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  double getPointY(void);

  //*******************************************************************
  /*!
   *  @brief  Z座標値の取得を行います。
   *  @return  double ... Z座標値
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  double getPointZ(void);

  //*******************************************************************
  /*!
   *  @brief  ベクトル座標値の取得を行います。
   *  @return  double * ... ベクトル座標値(X, Y, Z)
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  double *getPointAll(void);

  //*******************************************************************
  /*!
   *  @brief  単位ベクトルX座標値の取得を行います。
   *  @return  double ... 単位ベクトルX座標値
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  double getNormalizeX(void);

  //*******************************************************************
  /*!
   *  @brief  単位ベクトルY座標値の取得を行います。
   *  @return  double ... 単位ベクトルY座標値
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  double getNormalizeY(void);

  //*******************************************************************
  /*!
   *  @brief  単位ベクトルZ座標値の取得を行います。
   *  @return  double ... 単位ベクトルZ座標値
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  double getNormalizeZ(void);

  //*******************************************************************
  /*!
   *  @brief  単位ベクトル座標値の取得を行います。
   *  @return  double * ... 単位ベクトル座標値(X, Y, Z)
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  double *getNormalizeALL(void);

  //*******************************************************************
  /*!
   *  @brief  ベクトルの長さを取得します。
   *  @return  double ... ベクトルの長さ
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  double getLength(void);

  //*******************************************************************
  /*!
   *  @brief  ベクトルの加算を行います。
   *  @param  val ... [In] ３Ｄベクトルクラスオブジェクト
   *  @return  CThreedVector ... ３Ｄベクトルクラスオブジェクト
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  CThreedVector operator+(CThreedVector &val);

  //*******************************************************************
  /*!
   *  @brief  ベクトルの減算を行います。
   *  @param  val ... [In] ３Ｄベクトルクラスオブジェクト
   *  @return  CThreedVector ... ３Ｄベクトルクラスオブジェクト
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  CThreedVector operator-(CThreedVector &val);

  //*******************************************************************
  /*!
   *  @brief  スカラーの乗算を行います。
   *  @param  val ... [In] 乗算用スカラー
   *  @return  CThreedVector ... ３Ｄベクトルクラスオブジェクト
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  CThreedVector operator*(double val);

  //*******************************************************************
  /*!
   *  @brief  スカラーの除算を行います。
   *  @param  val ...[In] 除算用スカラー
   *  @return  CThreedVector ... ３Ｄベクトルクラスオブジェクト@n
   *           除算に0が指定された場合、NULLが返されます。
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  CThreedVector operator/(double val);

  //*******************************************************************
  /*!
   *  @brief  ベクトルの代入を行います。
   *  @param  val ... [In] ３Ｄベクトルクラスオブジェクト
   *  @return  CThreedVector & ... ３Ｄベクトルクラスオブジェクト
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  CThreedVector &operator=(const CThreedVector &val);

  //*******************************************************************
  /*!
   *  @brief  ベクトルの比較(==)を行います。
   *  @param  val ... [In] ３Ｄベクトルクラスオブジェクト
   *  @retval  true  ... 比較結果が真
   *  @retval  false ... 比較結果が偽
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  bool operator==(CThreedVector &val);

  //*******************************************************************
  /*!
   *  @brief  ベクトルの比較(!=)を行います。
   *  @param  val ... [In] ３Ｄベクトルクラスオブジェクト
   *  @retval  true  ... 比較結果が真
   *  @retval  false ... 比較結果が偽
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  bool operator!=(CThreedVector &val);

  //*******************************************************************
  /*!
   *  @brief  行列要素の取得を行います。
   *  @param  id ... [In] 行列のインデックス
   *  @return  double & ... 行列要素
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  double & operator[](int id);

  //*******************************************************************
  /*!
   *  @brief  内積の取得を行います。
   *  @param  val ... [In]３Ｄベクトルクラスオブジェクト
   *  @return  double ... 内積
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  double getDotProduct(CThreedVector &val);

  //*******************************************************************
  /*!
   *  @brief  外積の取得を行います。
   *  @param  val ... [In] ３Ｄベクトルクラスオブジェクト
   *  @return  CThreedVector ... 外積(３Ｄベクトルクラスオブジェクト)
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  CThreedVector getCrossProduct(CThreedVector &val);

  //*******************************************************************
  /*!
   *  @brief  角度の取得を行います。
   *  @param  val ... [In] ３Ｄベクトルクラスオブジェクト
   *  @return  double ... 角度
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  double getAngle(CThreedVector &val);

  //*******************************************************************
  /*!
   *  @brief  内部データの出力を行います。
   *  @param  ost ... [In] 出力ストリーム
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  void show(ostream &ost);

/*--------------*/
/* 非公開メンバ */
/*--------------*/
private:
  double fscalar;                                // スカラー
  double fvector[3];                             // ベクトル
  double fvectorlength;                          // ベクトルの長さ
  double fnormalvector[3];                       // 単位ベクトル

  //*******************************************************************
  /*!
   *  @brief  ベクトルの長さを計算します。
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  void culcLength(void);

  //*******************************************************************
  /*!
   *  @brief  単位ベクトルを計算します。
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  void culcNormalVector(void);
};

#endif
