#ifndef __CObjData_h__
#define __CObjData_h__

#include <cstring>
#include <vector>

#include "ObjData.h"
#include "ObjDetailData.h"

using namespace std;

namespace objloader
{

/**
 *  @struct  St_vf_detail_data
 *  @brief  座標インデックス構造体
 *  @date  2008/12/1 ... 新規作成
 */
struct St_vf_detail_data{
  long detail_data[3];                           // 頂点座標No・テクスチャ座標No・法線座標Noのいずれかで使用
};

/**
 *  @struct  St_face_data
 *  @brief  面データ構造体
 *  @date  2008/12/1 ... 新規作成
 */
struct St_face_data{
  int           groupNo;                         // グループNo
  string        groupName;                       // グループ名
  int           s_groupNo;                       // スムージンググループNo
  string        s_groupName;                     // スムージンググループ名
  string        mtlnm;                           // マテリアル定義名
  CThreedVector faceNormal;                      // 面法線

  vector <CThreedVector>     vectorNormal;       // 頂点法線
  vector <St_vf_detail_data> vf_data;            // vf詳細データ

  //*******************************************************************
  /*!
   *  @brief  内部データの出力を行います。
   *  @param  ost ... アウトプットストリーム
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  void St_face_data::show(ostream &ost) const
  {
    ost << "======================================" << endl;
    for(unsigned int i = 0; i < vf_data.size(); i++)
    {
      ost << "--------------------------------------" << endl;
      if(groupNo)
      {
        ost << "グループNo：" << groupNo << endl;
      }

      if(groupName.size())
      {
        ost << "グループ名：" << groupName.c_str() << endl;
      }

      if(s_groupNo)
      {
        ost << "スムージンググループNo:" << s_groupNo << endl;
      }

      if(s_groupName.size())
      {
        ost << "スムージンググループ名:" << s_groupName.c_str() << endl;
      }

      if(mtlnm.size())
      {
        ost << "マテリアル名：" << mtlnm.c_str() << endl;
      }

      ost << "頂点座標No：" << vf_data[i].detail_data[0] << endl;

      ost << "テクスチャ座標No：";

      if(vf_data[i].detail_data[1])
      {
        ost << "none" << endl;
      }
      else
      {
        ost << vf_data[i].detail_data[1] << endl;
      }

      ost << "法線座標No：" << vf_data[i].detail_data[2] << endl;
    }
  }

  //*******************************************************************
  /*!
   *  @brief  内部データの初期化を行います。
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  void St_face_data::clear(void)
  {
    groupNo = 0;
    groupName.clear();
    mtlnm.clear();
    vf_data.clear();
  }
};

/** @class    CObjData
 *  @brief    OBJ基本データクラス
 *  @author    Masakazu Yoshida(yoshida@iltj.jp)
 *  @version  1.0
 *  @date    2008/12/1 ... 新規作成
 *  @attention  Copyright (C) 2008, ILTJ Inc.
 */
class CObjData
{
/*--------------*/
/* 公開メンバ   */
/*--------------*/
public:
  //*******************************************************************
  /*!
   *  @brief  デフォルトコンストラクタ
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  CObjData(void);

  //*******************************************************************
  /*!
   *  @brief  デストラクタ
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  ~CObjData(void);

  //*******************************************************************
  /*!
   *  @brief  グループNoを取得します。
   *  @return  int ... グループNo
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  int getGroupNo(void);

  //*******************************************************************
  /*!
   *  @brief  グループ名を取得します。
   *  @return  std::string ... グループ名
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  string getGroupName(void);

  //*******************************************************************
  /*!
   *  @brief  マテリアル定義名を取得します。
   *  @return  std::string ... マテリアル定義名
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  string getMtlName(void);
  
  //*******************************************************************
  /*!
   *  @brief  面法線を取得取得します。
   *  @return  CThreedVector * ... 3Dベクトルクラスオブジェクト
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  CThreedVector *getFaceNormal(void);

  //*******************************************************************
  /*!
   *  @brief  法線フラグを取得します。
   *  @retval  true  ... 法線設定あり
   *  @retval  false ... 法線設定なし
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  bool getNormalFlg(void);

  //*******************************************************************
  /*!
   *  @brief  テクスチャフラグを取得します。
   *  @retval  true  ... テクスチャ設定あり
   *  @retval  false ... テクスチャ設定なし
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  bool getTextureFlg(void);

  //*******************************************************************
  /*!
   *  @brief  頂点法線を取得します。
   *  @param  val ... [In] インデックス
   *  @return  CThreedVector * ... 3Dベクトルクラスオブジェクト
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  CThreedVector *getVertexNormal(unsigned int val);

  //*******************************************************************
  /*!
   *  @brief  OBJ詳細データを取得します。
   *  @param  val ... [In] インデックス
   *  @return  CObjDetailData * ... OBJ詳細データクラスオブジェクト
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  CObjDetailData *getObjDetailData(unsigned int val);

  //*******************************************************************
  /*!
   *  @brief  グループNoを設定します。
   *  @param  val ... [In] グループNo
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  void setGroupNo(int val);

  //*******************************************************************
  /*!
   *  @brief  グループ名を設定します。
   *  @param  val ... [In] グループ名
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  void setGroupName(string val);

  //*******************************************************************
  /*!
   *  @brief  マテリアル定義名を設定します。
   *  @param  val ... [In] マテリアル定義名
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  void setMtlName(string val);

  //*******************************************************************
  /*!
   *  @brief  面法線を設定します。
   *  @param  pval ... [In] 面法線(3Dベクトルクラスオブジェクト)
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  void setFaceNormal(const CThreedVector *pval);

  //*******************************************************************
  /*!
   *  @brief  法線フラグを設定します。
   *  @param  val ... [In] 法線フラグ
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  void setNormalFlg(bool val);

  //*******************************************************************
  /*!
   *  @brief  テクスチャフラグを設定します。
   *  @param  val ... [In] テクスチャフラグ
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  void setTextureFlg(bool val);

  //*******************************************************************
  /*!
   *  @brief  法線座標インデックスを設定します。
   *  @param arrayindex ... [In] 格納先インデックス
   *  @param index ... [In] 法線座標インデックス
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  void setNormalIndex(int arrayindex, long index);

  //*******************************************************************
  /*!
   *  @brief  頂点法線を設定します。
   *  @param  pval ... [In] 頂点法線(3Dベクトルクラスオブジェクト)
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  void addVertexNormal(const CThreedVector &pval);

  //*******************************************************************
  /*!
   *  @brief  OBJ詳細データを追加します。
   *  @param  pval ... [In] OBJ詳細データクラスオブジェクト
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  void addObjDetailData(const CObjDetailData &pval);

  //*******************************************************************
  /*!
   *  @brief  OBJインデックスデータを追加します。
   *  @param  pval ... [In] 座標インデックス構造体
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  void addIndex(const St_vf_detail_data & pval);

  //*******************************************************************
  /*!
   *  @brief  OBJデータの初期化を行います。
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  void clear(void);

  //*******************************************************************
  /*!
   *  @brief  OBJ詳細データ数を取得します。
   *  @return  unsigned int ... 保持しているOBJ詳細データ数
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  unsigned int getObjDetailDataSize(void);

  //*******************************************************************
  /*!
   *  @brief  OBJインデックスデータ数を取得します。
   *  @return  unsigned int ... 保持しているOBJインデックスデータ数
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  unsigned int getIndexSize(void);

  //*******************************************************************
  /*!
   *  @brief  OBJインデックスデータを取得します。
   *  @param  index ... 取得データのインデックス
   *  @return  St_vf_detail_data ... 保持しているOBJインデックスデータ
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  St_vf_detail_data getIndex(int index);

  //*******************************************************************
  /*!
   *  @brief  法線座標データを取得します。
   *  @param  index ... 取得データのインデックス
   *  @return  CThreedVector ... 法線座標データ
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  CThreedVector getVertexNormal(int index);

  //*******************************************************************
  /*!
   *  @brief  内部データを出力します。
   *  @param  os ... [In] アウトプットストリーム
   *  @date  2008/12/1 ... 新規作成
   */
  //********************************************************************
  void show(ostream &os);

/*--------------*/
/* 非公開メンバ */
/*--------------*/
private:
  int           groupNo;                         // グループNO
  string        groupName;                       // グループ名
  string        mtlName;                         // mtl定義名

  CThreedVector faceNormal;                      // 面法線

  bool          normalFlg;                       // 法線フラグ(true:obj設定あり, false:なし)
  bool          textureFlg;                      // テクスチャフラグ(true:obj設定あり, false:なし)

  vector <CThreedVector>     vertexNormal;       // 頂点法線
  vector <CObjDetailData>    objDetailData;      // OBJ詳細データ
  vector <St_vf_detail_data> v_index;            // インデックスデータ
};
}
#endif
